datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String    @default("https://utfs.io/f/3fbc2bf9-050e-4a0e-b15a-1c78ebaaeed0_DefaultUser.png")

  accounts Account[]
  sessions Session[]

  Posts              Post[]
  PostVotes          PostVote[]
  Comments           Comment[]
  CommentVotes       CommentVote[]
  CreatedSubreaddits Subreaddit[]   @relation("createdBy")
  Subscriptions      Subscription[]

  @@index([username])
}

model Subscription {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  subreaddit   Subreaddit @relation(fields: [subreadditId], references: [id])
  subreadditId String

  @@id([userId, subreadditId])
}

model Subreaddit {
  id        String @id @default(cuid())
  creator   User   @relation("createdBy", fields: [creatorId], references: [id])
  creatorId String

  name        String         @unique
  description String         @default("A wonderful description.")
  rules       String[]       @default(["Remember the human", "Behave like you would in real life", "Look for the original source of content", "Search for duplicates before posting", "Read the communityâ€™s rules"])
  image       String         @default("https://utfs.io/f/eae14390-926b-448b-9d30-b1e387700399_DefaultSubreaddit.png")
  Posts       Post[]
  Subscribers Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Post {
  id           String     @id @default(cuid())
  subreaddit   Subreaddit @relation(fields: [subreadditId], references: [id])
  subreadditId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String

  title     String
  text      String     @default("")
  image     String?
  PostVotes PostVote[]
  Comments  Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String  @id @default(cuid())
  commentId String?
  Post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?

  text         String?
  replyingTo   Comment?      @relation("replyingTo", fields: [replyingToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyingToId String?
  CommentVotes CommentVote[]
  replies      Comment[]     @relation("replyingTo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum VoteTypes {
  UP
  DOWN
}

model PostVote {
  user   User      @relation(fields: [userId], references: [id])
  userId String
  post   Post      @relation(fields: [postId], references: [id])
  postId String
  type   VoteTypes

  @@id([userId, postId])
}

model CommentVote {
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment   @relation(fields: [commentId], references: [id])
  commentId String
  type      VoteTypes

  @@id([userId, commentId])
}
